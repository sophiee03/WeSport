openapi: 3.0.3
info:
  title: API WeSport
  version: 1.0.0
  description: API per la gestione del servizio.

servers:  
  - url: https://api.weSport.it/v1

#------------------------------------------------------

paths:
  /annunci:
    get:
      summary: Ottieni tutti gli annunci
      tags:
        - annunci
      responses:
        200:
          description: Lista di annunci
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/annuncio'
        500:
          description: Errore interno

    post:
      summary: Crea un nuovo annuncio (utente registrato)
      tags:
        - annunci
        ######################################
      response:

  /areesportive:
    get:
      summary: Ottieni tutte le strutture sportive
      tags:
        - areesportive
      responses:
        '200':
          description: Successo
        '500':
          description: Errore interno
    
  /areesportive/filtered:
    get:
      summary: Ottieni le aree sportive filtrate per visualizzazioni recenti (utente registrato)
      tags:
        - areesportive
        ###################################
 
  /areesportive/search:
    get:
      summary: Ottieni le aree sportive filtrate per categoria
      tags:
        - areesportive
      parameters:
        - name: categoria
          in: query
          description: Categoria dell'area sportiva (ad esempio calcio, tennis, basket)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successo aree sportive filtrate per categoria
        '400':
          description: Parametro 'categoria' mancante
        '500':
          description: Errore interno

  /chat:
    get:
      summary: Ottieni le informazioni della chat (utente registrato)
      tags:
          - annunci
      ###############################

  /messaggio:
    get:
      summary: Ottieni i messaggi scritti nella chat (utente registrato)
      tags:
          - annunci
      ###############################

  /percorso:
    get:
      summary: Ottieni i percorsi per la relativa area sportiva
      tags:
        - percorsi
      ################################
    
    post:
      summary: Consiglia un percorso (utente registrato)
      tags:
        - percorsi
      #################################

  /percorso/{:id}:
    get:
      summary: Ottieni i percorsi che ha consigliato l'utente (utente registrato)
      tags:
          - percorsi
      #################################
  
  /segnalazione/{:id}:
    get:
      summary: Ottieni le segnalazioni che ha effettuato l'utente (utente registrato)
      tags:
        - segnalazioni
      #################################

  /segnalazione:
    post:
      summary: Crea una segnalazione (utente registrato)
      tags:
        - segnalazioni
      #############################

  /avviso:
    get:
      summary: Ottieni tutti gli avvisi pubblicati
      tags:
        - avvisi
      responses:
        '200':
          description: Successo
        '500':
          description: Errore interno

  /avviso/richiesta:
    post:
      summary: Richiedi la pubblicazione di un avviso (azienda verificata)
      tags:
        - avvisi
        ####################################

  /auth/login:
    post:
      summary: Login utente tramite ID provider 
      tags:
        - autenticazione
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '../components/schemas/Login/LoginRequest.yaml'
      responses:
        '200':
          description: Login riuscito
          content:
            application/json:
              schema:
                $ref: '..//verifytoken.yaml'
        '401':
          description: Credenziali non valide

  /auth/logout:
    post:
      summary: Logout dell'utente (utente registrato)
      tags:
        - autenticazione
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout effettuato con successo
        '401':
          description: Utente non autorizzato

  /utenteregistrato/profiloUtente:
    get:
      summary: Ottiene il profilo utente (utente registrato)
      tags:
        - gestioneutenti
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Info del profilo
          content:
            application/json:
              schema:
                $ref: '../components/schemas/utenteregistrato.yaml'
        '401':
          description: Utente non autorizzato
  
  /utenteregistrato/profiloUtente/impostazioni:
    get:
      summary: Ottiene le impostazioni del profilo utente (utente registrato)
      tags:
        - gestioneutenti
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Impostazioni
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utenteregistrato'
        '401':
          description: Utente non autorizzato

#------------------------------------------------------------

components:
  schemas:
    annuncio:
      type: object
      properties:
        idAnnuncio:
          type: string
        idCapogruppo:
          type: string
          description: "nomeutente dell'utente che ha creato l'annuncio"
        Npersone:
          type: int
        categoria: 
          type: string
          enum:
            - calcio
            - basket
            - pallavolo/beach_volley
            - padel
            - tennis
            - arrampicata
            - nuoto
            - corsa
            - trekking
            - ciclismo
        description:
          type: string
        dataOrario:
          type: date-time
        iscritti:
          type: array
          items:
            type: string
          description: "ID degli utenti iscritti all'annuncio"
        visibilita:
          type: boolean
          default: true
      required:
        - idAnnuncio
        - idCapogruppo
        - categoria
        - Npersone

    areasportiva:
      type: object
      properties:
        nome:
          type: string
        zona:
          type: string
          enum:
            - Trento Nord
            - Trento Sud
            - Trento Centro
            - Trento Ovest
            - Trento Est
        categoria: 
          type: string
          enum:
            - calcio
            - basket
            - pallavolo/beach_volley
            - padel
            - tennis
            - arrampicata
            - nuoto
        selfDescription:
          type: string
        privata:
          type: boolean
        voti:
          type: array
          items:
            type: int
        numerovoti:
          type: int
        recensione:
          type: int
      required:
        - nome
        - zona
        - categoria
        - privata

    chat:
      type: object
      properties:
        id:   #uguale a quello dell'annuncio
          type: string
          description: ID dell'annuncio a cui Ã¨ collegata la chat
        partecipanti:
          type: array
            items:
              type: string
            description: ID degli utenti coinvolti nella chat
        messaggi:
          type: array
          items:
            $ref: '#/components/schemas/messaggio'
      required:
        - id
        - idannuncio

    messaggio:
      type: object
      properties:
        data:
          type: date
        mittente:
          type: string
          description: "id dell'utente che ha inviato il messaggio"
        testo: 
          type: string
      required:
        - mittente
        - data

    percorso:
      type: object
      properties:
        idpercorso:
          type: int
        idcreatore:
          type: string
          description: "id dell'utente che ha creato il percorso"
        categoria: 
          type: string
          enum:
            - corsa
            - trekking
            - ciclismo
        difficolta:
          type: int
        durata:
          type: int
        voti:
          type: array
          items:
            type: int
        numerovoti:
          type: int
        recensione:
          type: int
        selfDescription:
          type: string
        #MAPPA DA METTERE
      required:
        - idpercorso
        - idcreatore
        - categoria

    utenteregistrato:
      type: object
      properties:
        nomeutente:
          type: string
        email: 
          type: string
          format: email
        tipo:
          type: string
          enum:
            - registrato
            - azienda     #verificata
        punti:
          type: int
          default: 0
        fotoprofilo:
          type: string
          description: "URL della foto del profilo"
        selfdescription:
          type: string
        segnalazioni:
          type: array
          items:
            $ref: '#/components/schemas/segnalazione'
        annunci:
          type: array
          items:
            $ref: '#/components/schemas/annuncio'
      required:
        - email
        - nomeutente

    utente:
      type: object

    segnalazione:
      type: object
      properties:
        idsegnalazione:
          type: int
        data:
          type: date
        descrizione:
          type: string
        idcreatore:
          type: string
          description: 'id utente che ha creato la segnalazione'
        foto:
          type: string
          description: 'url della foto importata/scattata'
        stato:
          type: string
          enum:
            - accettata
            - elaborazione
            - rifiutata
      required:
        - idsegnalazione
        - data
        - idcreatore
        - foto
    
    avviso:
      type: object
      properties:
        idavviso:
          type: int
        data:
          type: date
        categoria:
          type: string
          enum:
            - evento
            - chiusura/manutenzione
            - festival
        stato:
          type: string
          enum:
            - in_corso
            - annullato
            - rimandato
            - concluso
            - coming soon
        testo: 
          type: string
      required:
        - idavviso 
        - data
        - categoria
    
    LoginRequest:
      type: object
      properties:
        token:
          type: string
          description: Token fornito dal provider di identitÃ  (es. Google)
      required:
        - token

    verifytoken:
      type: object
      properties:
        token:
          type: string
          description: Token JWT per l'autenticazione
        expiresIn:
          type: integer
          description: Durata del token in secondi
      required:
        - token
        - expiresIn

        