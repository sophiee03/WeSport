openapi: 3.0.3
info:
  title: API WeSport
  version: 1.0.0
  description: API per la gestione del servizio.

servers:  
  - url: https://api.weSport.it/v1

#------------------------------------------------------

paths:
  /annunci:
    get:
      summary: Ottieni tutti gli annunci
      tags:
        - annunci
      responses:
        200:
          description: Lista di annunci
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/annuncio'
        500:
          description: Errore interno

    post:
      summary: Crea un nuovo annuncio (utente registrato)
      tags:
        - annunci
      security:
        - bearerAuth: []  # Richiede autenticazione con JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/annuncio'
      responses:
        '201':
          description: Annuncio creato con successo
        '400':
          description: Dati non validi
        '401':
          description: Autenticazione richiesta
  /annunci/{idAnnuncio}:
    get:
      summary: Recupera un annuncio specifico
      parameters:
        - name: idAnnuncio
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/annuncio'
        '404':
          description: Annuncio non trovato
    delete:
      summary: Eliminazione di un annuncio (solo utente registrato che l'ha creato)
      tags:
        - annunci
      security:
        - bearerAuth: []  # Richiede autenticazione con JWT
      parameters:
        - name: idAnnuncio
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Annuncio eliminato con successo
        '401':
          description: Non autenticato
        '403':
          description: Accesso negato - non sei il creatore dell'annuncio
        '404':
          description: Annuncio non trovato
    put:
      summary: Modificare un annuncio esistente (solo utente registrato che l'ha creato)
      tags:
        - annunci
      security:
        - bearerAuth: []  # Richiede autenticazione con JWT
      parameters:
        - name: idAnnuncio
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/annuncio'
      responses:
        '200':
          description: Annuncio aggiornato con successo
        '400':
          description: Dati non validi
        '401':
          description: Non autenticato
        '403':
          description: Non autorizzato - solo il creatore può modificare
        '404':
          description: Annuncio non trovato
  
  /annunci/{idAnnuncio}/chat:
    get:
      summary: Ottieni le informazioni della chat (utente registrato iscritto a quell'annuncio)
      tags:
          - annunci
      security:
      - bearerAuth: []   # richiede autenticazione JWT
      parameters:
      - name: idAnnuncio
        in: path
        required: true
        schema:
          type: string
        description: ID dell'annuncio di cui vuoi ottenere la chat
      responses:
        '200':
          description: Informazioni della chat recuperate con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat'
        '401':
          description: Non autenticato - token mancante o non valido
        '403':
          description: Accesso negato - utente non autorizzato a vedere questa chat
        '404':
          description: Chat o annuncio non trovato

  /annunci/{idAnnuncio}/chat/{idchat}/messaggi:
    get:
      summary: Ottieni i messaggi scritti nella chat (utente registrato iscritto all'annuncio)
      tags:
          - annunci
      security:
        - bearerAuth: []
      parameters:
        - name: idAnnuncio
          in: path
          required: true
          schema:
            type: string
          description: ID dell'annuncio
        - name: idChat
          in: path
          required: true
          schema:
            type: string
          description: ID della chat
      responses:
        '200':
          description: Lista dei messaggi della chat
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/messaggio'
        '401':
          description: Non autenticato
        '403':
          description: Accesso negato - utente non iscritto all'annuncio o non autorizzato
        '404':
          description: Annuncio, chat o messaggi non trovati


  /annuncio/{idAnnuncio}/iscritti:    #?????? è corretto? o devo mettere utenteregistrato?
    get:
      summary: Ottieni gli utenti iscritti a un annuncio (utente registrato)
      tags:
        - annunci
      security:
        - bearerAuth: []
      parameters:
        - name: idAnnuncio
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lista di utenti iscritti all'annuncio
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/utenteregistrato'
        '401':
          description: Non autenticato
        '404':
          description: Annuncio non trovato
    post:
      summary: Iscriversi all'annuncio (utente registrato)
      tags:
        - annunci
      security:
        - bearerAuth: []
      parameters:
        - name: idAnnuncio
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Iscrizione avvenuta con successo
        '400':
          description: Utente già iscritto o richiesta malformata
        '401':
          description: Non autenticato
        '404':
          description: Annuncio non trovato
    delete:
      summary: Disiscrivi l'utente dall'annuncio (utente registrato)
      tags:
        - annunci
      security:
        - bearerAuth: []
      parameters:
        - name: idAnnuncio
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Disiscrizione avvenuta con successo
        '401':
          description: Utente non autenticato
        '403':
          description: Accesso negato (non iscritto o non autorizzato)
        '404':
          description: Annuncio non trovato

  /sport/{sport}/areesportive:
    get:
      summary: Ottieni tutte le strutture sportive per una determinata categoria
      description: >-
        di default filtra le aree sportive per categoria, si possono filtrare ulteriormente 
        per zona una volta entrati nella categoria di quello sport
      tags:
        - sport
      parameters:
        - name: categoria
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/sport'
        - name: zona
          in: query
          required: false
          schema:
            type: string
            enum: [Trento Nord, Trento Sud, Trento Centro, Trento Ovest, Trento Est]
      responses:
        '200':
          description: "Lista di aree sportive per lo sport specificato"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/areasportiva'
        '500':
          description: Errore interno

  /sport/{sport}/annuncio:
    get:
      summary: Visualizza gli annunci per il relativo sport
      tags:
        - annunci
      parameters:
        - name: sport
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/sport'
      responses:
        '200':
          description: "Lista di annunci per lo sport specificato"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/annunci'

  /sport/{sport}/percorso:
    get:
      summary: Visualizza i percorsi per il relativo sport
      tags:
        - sport
      parameters:
        - name: sport
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/sport'
      responses:
        '200':
          description: "Lista di percorsi per lo sport specificato"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/percorso'
    post:
      summary: Consigliare un percorso (utente registrato)
      tags:
        - sport
      security:
        - bearerAuth: []  # Richiede autenticazione con JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/percorso'
      responses:
        '201':
          description: Percorso creato con successo
        '400':
          description: Dati non validi
        '401':
          description: Autenticazione richiesta

  /sport/{sport}/percorso/{idpercorso}:
    get:
      summary: Visualizzare informazioni di un percorso specifico
      parameters:
        - name: idPercorso
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/percorso'
        '404':
          description: Percorso non trovato
    put:
      summary: Modificare un percorso esistente (solo utente registrato che l'ha creato)
      tags:
        - sport
      security:
        - bearerAuth: []  # Richiede autenticazione con JWT
      parameters:
        - name: idPercorso
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/percorso'
      responses:
        '200':
          description: Percorso aggiornato con successo
        '400':
          description: Dati non validi
        '401':
          description: Non autenticato
        '403':
          description: Non autorizzato - solo il creatore può modificare
        '404':
          description: Annuncio non trovato
    delete:
      summary: Eliminazione di un percorso (solo utente registrato che l'ha creato)
      tags:
        - sport
      security:
        - bearerAuth: []  # Richiede autenticazione con JWT
      parameters:
        - name: idPercorso
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Percorso eliminato con successo
        '401':
          description: Non autenticato
        '403':
          description: Accesso negato - non sei il creatore del percorso
        '404':
          description: Annuncio non trovato

  /avviso:
    get:
      summary: Ottieni tutti gli avvisi pubblicati con possibilità di filtrare per tipo
      tags:
        - avvisi
      parameters:
        - name: categoria
          in: query
          required: false
          description: "Filtra gli avvisi per categoria (es. evento)"
          schema:
            type: string
            enum:
              - evento
              - chiusura/manutenzione
              - festival
      responses:
        '200':
          description: "Lista di avvisi"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/avviso'
        '500':
          description: Errore interno
    post:
      summary: Richiedi la pubblicazione di un avviso (azienda verificata)
      tags:
        - avvisi
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/avviso'
      responses:
        '201':
          description: "Richiesta per avviso creata con successo"
        '403':
          description: "Accesso negato: solo le aziende verificate possono fare richiesta"
      
  
  /avviso/{idAvviso}:
    get:
      summary: Visualizzare i dettagli di un avviso specifico
      tags:
      - avvisi
      parameters:
        - name: idAvviso
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/avviso'
        '404':
          description: Avviso non trovato

  /auth/login_reg:
    post:
      summary: Login utente tramite ID provider
      tags:
        - autenticazione
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login riuscito, restituisce un token JWT
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token
        '401':
          description: Credenziali non valide

  /auth/logout: #solo indicativo (non implementato)
    post:
      summary: Logout dell'utente (utente registrato)
      tags:
        - autenticazione
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout effettuato con successo
        '401':
          description: Utente non autorizzato

  /utenteregistrato/{nomeutente}:
    get:
      summary: Ottiene le informazioni dell'utente (utente registrato)
      tags:
        - gestioneutenti
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Info del profilo
          content:
            application/json:
              schema:
                $ref: '../components/schemas/utenteregistrato'
        '401':
          description: Utente non autorizzato
    delete:
      summary: Eliminazione di un utente (utente registrato)
      tags:
        - gestioneutenti
      security:
        - bearerAuth: []  # Richiede autenticazione con JWT
      parameters:
        - name: nomeutente
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Utente eliminato con successo
        '401':
          description: Non autenticato
        '403':
          description: Accesso negato
        '404':
          description: Utente non trovato
    put:
      summary: Modificare le informazioni di un utente (utente registrato)
      tags:
        - gestioneutenti
      security:
        - bearerAuth: []  # Richiede autenticazione con JWT
      parameters:
        - name: nomeutente
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/utenteregistrato'
      responses:
        '200':
          description: Profilo aggiornato con successo
        '400':
          description: Dati non validi
        '401':
          description: Non autenticato
        '403':
          description: Non autorizzato
        '404':
          description: Utente non trovato
    
  
  /utenteregistrato/{nomeutente}/annuncio:
    get:
      summary: Visualizza gli annunci pubblicati dall'utente (utente registrato)
      tags:
        - gestioneutenti
      parameters:
        - name: nomeutente
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Lista di annunci pubblicati dall'utente"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/annuncio'
 
  /utenteregistrato/{nomeutente}/segnalazione:
    get:
      summary: Visualizza le segnalazioni pubblicate dall'utente (utente registrato)
      tags:
        - segnalazioni
      parameters:
        - name: nomeutente
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Lista di segnalazioni pubblicate dall'utente"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/segnalazione'
    post:
      summary: Effettua una segnalazione (utente registrato)
      tags:
        - segnalazioni
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/segnalazione'
      responses:
        '201':
          description: Segnalazione effettuata con successo
        '400':
          description: Dati non validi
        '401':
          description: Autenticazione richiesta
                  
#------------------------------------------------------------

components:
  schemas:
    securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT

    annuncio:
      type: object
      properties:
        idAnnuncio:
          type: string
        idCapogruppo:
          type: string
          description: "nomeutente dell'utente che ha creato l'annuncio"
        Npersone:
          type: integer
        categoria: 
          $ref: '#/components/schemas/sport'
        descrizione:
          type: string
        dataOrario:
          type: string
          format: date-time
        iscritti:
          type: array
          items:
            type: string
          description: "ID degli utenti iscritti all'annuncio"
      required:
        - idAnnuncio
        - idCapogruppo
        - categoria
        - Npersone

    areasportiva:
      type: object
      properties:
        nome:
          type: string
        zona:
          type: string
          enum:
            - Trento Nord
            - Trento Sud
            - Trento Centro
            - Trento Ovest
            - Trento Est
        categoria:
          type: array
          items:
            $ref: '#/components/schemas/sport'
        selfDescription:
          type: string
        privata:
          type: boolean
        voti:
          type: array
          items:
            type: integer
        numerovoti:
          type: integer
        recensione:
          type: integer
      required:
        - nome
        - zona
        - categoria
        - privata

    sport:
      tipi:
        type: string
        enum:
          - calcio
          - basket
          - tennis
          - padel
          - corsa
          - trekking
          - ciclismo
          - pallavolo/beach_volley
          - nuoto
          - arrampicata

    chat:
      type: object
      properties:
        idChat:
          type: string
          description: ID dell'annuncio a cui è collegata la chat
        partecipanti:
          type: array
          items:
            type: string
            description: ID degli utenti coinvolti nella chat
        messaggi:
          type: array
          items:
            $ref: '#/components/schemas/messaggio'
      required:
        - idChat
        - partecipanti

    messaggio:
      type: object
      properties:
        data:
          type: string
          format: date
        mittente:
          type: string
          description: "id dell'utente che ha inviato il messaggio"
        testo: 
          type: string
      required:
        - mittente
        - data

    percorso:
      type: object
      properties:
        idPercorso:
          type: integer
        idcreatore:
          type: string
          description: "id dell'utente che ha creato il percorso"
        categoria: 
          type: string
          enum:
            - corsa
            - trekking
            - ciclismo
        difficolta:
          type: integer
        durata:
          type: integer
        voti:
          type: array
          items:
            type: integer
        numerovoti:
          type: integer
        recensione:
          type: integer
        selfDescription:
          type: string
        #MAPPA DA METTERE
      required:
        - idPercorso
        - idcreatore
        - categoria

    utenteregistrato:
      type: object
      properties:
        nomeutente:
          type: string
        email: 
          type: string
          format: email
        tipo:
          type: string
          enum:
            - registrato
            - azienda    
            - aziendaVer  #verificata
        punti:
          type: integer
          default: 0
        fotoprofilo:
          type: string
          description: "URL della foto del profilo"
        selfdescription:
          type: string
        percorsi:
          type: array
          items:
            $ref: '#/components/schemas/percorso'
        segnalazioni:
          type: array
          items:
            $ref: '#/components/schemas/segnalazione'
        annunci:
          type: array
          items:
            $ref: '#/components/schemas/annuncio'
      required:
        - email
        - nomeutente
        - tipo

    utente:
      type: object

    segnalazione:
      type: object
      properties:
        idSegnalazione:
          type: integer
        data:
          type: date
        descrizione:
          type: string
        idcreatore:
          type: string
          description: 'id utente che ha creato la segnalazione'
        foto:
          type: string
          description: 'url della foto importata/scattata'
        stato:
          type: string
          enum:
            - accettata
            - elaborazione
            - rifiutata
      required:
        - idSegnalazione
        - data
        - idcreatore
        - foto
    
    avviso:
      type: object
      properties:
        idAvviso:
          type: integer
        data:
          type: date
        categoria:
          type: string
          enum:
            - evento
            - chiusura/manutenzione
            - festival
        stato:
          type: string
          enum:
            - in_corso
            - annullato
            - rimandato
            - concluso
            - coming soon
        testo: 
          type: string
      required:
        - idAvviso 
        - data
        - categoria

    LoginRequest:
      type: object
      required:
        - token
        - expiresIn
